name: Version Increment and Merge

on:
  pull_request:
    types: [opened, synchronize, labeled]

permissions:
  contents: write
  pull-requests: write

jobs:
  increment-version:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Ensure that the full history is fetched
        ref: ${{ github.head_ref }}  # Ensure you're on the correct PR branch

    - name: Set up .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.x'  # Adjust to your .NET version

    - name: Get PR Labels
      id: get_labels
      run: |
        PR_NUMBER=${{ github.event.pull_request.number }}
        echo "Fetching labels for PR #${PR_NUMBER}"
        
        # Fetch PR labels using GitHub API
        labels=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                          "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/labels" \
                          | jq -r '.[].name')
        
        echo "Labels: $labels"

        # Check if specific labels are present
        if echo "$labels" | grep -q 'major'; then
          echo "Label 'major' found. Incrementing major version."
          echo "INCREMENT=major" >> $GITHUB_ENV
        elif echo "$labels" | grep -q 'minor'; then
          echo "Label 'minor' found. Incrementing minor version."
          echo "INCREMENT=minor" >> $GITHUB_ENV
        else
          echo "No recognized label found. Incrementing patch version."
          echo "INCREMENT=patch" >> $GITHUB_ENV
        fi

    - name: Increment version
      id: increment_version
      run: |
        file="ConsoleApp1CICD/Properties/AssemblyInfo.cs" # Update path to reflect your project structure
        
        # Extract current version
        version=$(grep -oP '(?<=\[assembly: AssemblyVersion\(")[^"]+' $file | tr -d '\r' | tr -d '\n')
        echo "Current version: $version"

        # Extract major, minor, patch, and revision
        IFS='.' read -r major minor patch revision <<< "$version"

        # Determine increment based on environment variable
        case $INCREMENT in
          major)
            major=$((major + 1))
            minor=0
            patch=0
            revision=0
            ;;
          minor)
            minor=$((minor + 1))
            patch=0
            revision=0
            ;;
          patch)
            patch=$((patch + 1))
            ;;
          *)
            echo "Invalid increment type: $INCREMENT"
            exit 1
            ;;
        esac

        new_version="$major.$minor.$patch.$revision"
        echo "New version: $new_version"

        # Debug: Print the file content before modification
        echo "Original file content before modification:"
        cat $file

        # Replace the version in AssemblyInfo.cs using slashes
        sed -i "s/\[assembly: AssemblyVersion(\"$version\")\]/\[assembly: AssemblyVersion(\"$new_version\")\]/g" $file
        sed -i "s/\[assembly: AssemblyFileVersion(\"$version\")\]/\[assembly: AssemblyFileVersion(\"$new_version\")\]/g" $file

        # Debug: Print the file content after modification
        echo "Modified file content after modification:"
        cat $file

        # Output the new version so it can be used in later steps
        echo "new_version=$new_version" >> $GITHUB_ENV

    - name: Commit and push changes to PR branch
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config user.name "ahtesham-haq"
        git config user.email "ahtesham.ul.haq@healthwaresystems.com"
        
        # Add and commit changes
        git add .
        git commit -m "Incremented version to ${{ env.new_version }}" || echo "No changes to commit"
        
        # Verify the current branch
        echo "Current branch: ${{ github.head_ref }}"

        # Push changes to the branch associated with the PR
        git push origin ${{ github.head_ref }}

    - name: Merge changes to main
      if: github.event.action == 'labeled'  # Ensure this step only runs when a label is added
      run: |
        echo "Merging changes to main"
        
        # Check out the main branch
        git fetch origin main
        git checkout main
        
        # Merge the PR branch into main
        git merge ${{ github.head_ref }}
        
        # Push the updated main branch
        git push origin main
