name: Version Increment and Merge

on:
  pull_request:
    types: [opened, synchronize, labeled]

permissions:
  contents: write
  pull-requests: write

jobs:
  increment-version:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Ensure that the full history is fetched

    - name: Set up .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.x'  # Adjust to your .NET version

    - name: Get PR Labels
      id: get_labels
      run: |
        PR_NUMBER=${{ github.event.pull_request.number }}
        echo "Fetching labels for PR #${PR_NUMBER}"
        
        # Fetch PR labels using GitHub API
        labels=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                          "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/labels" \
                          | jq -r '.[].name')
        
        echo "Labels: $labels"

        # Check if specific labels are present
        if echo "$labels" | grep -q 'major'; then
          echo "Label 'major' found. Incrementing major version."
          echo "INCREMENT=major" >> $GITHUB_ENV
        elif echo "$labels" | grep -q 'minor'; then
          echo "Label 'minor' found. Incrementing minor version."
          echo "INCREMENT=minor" >> $GITHUB_ENV
        else
          echo "No recognized label found. Incrementing patch version."
          echo "INCREMENT=patch" >> $GITHUB_ENV
        fi

    - name: Increment version and commit changes
      if: github.event.action == 'labeled' || github.event.action == 'synchronize'
      id: increment_version
      run: |
        file="ConsoleApp1CICD/Properties/AssemblyInfo.cs" # Update path to reflect your project structure
        
        # Extract current versions
        versions=$(grep -oP '(?<=\[assembly: AssemblyVersion\(")[^"]+' $file)
        echo "Current versions:"
        echo "$versions"
        
        # Define the function to increment the version
        increment_version() {
          local version=$1
          IFS='.' read -r major minor patch revision <<< "$version"

          case $INCREMENT in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              revision=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              revision=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
            *)
              echo "Invalid increment type: $INCREMENT"
              exit 1
              ;;
          esac

          echo "$major.$minor.$patch.$revision"
        }

        # Loop through all versions and replace them in the file
        while IFS= read -r version; do
          new_version=$(increment_version "$version")
          echo "Updating version from $version to $new_version"
          # Replace the version in AssemblyInfo.cs using a pipe delimiter
          sed -i "s|\[assembly: AssemblyVersion(\"$version\")\]|\[assembly: AssemblyVersion(\"$new_version\")\]|g" $file
          sed -i "s|\[assembly: AssemblyFileVersion(\"$version\")\]|\[assembly: AssemblyFileVersion(\"$new_version\")\]|g" $file
        done <<< "$versions"

        # Debug: Print the file content after modification
        echo "Modified file content:"
        cat $file

        # Output the new version so it can be used in later steps
        echo "new_version=$new_version" >> $GITHUB_ENV
        
        # Commit changes
        git config user.name "ahtesham-haq"
        git config user.email "ahtesham.ul.haq@healthwaresystems.com"
        git add .
        git commit -m "Incremented version to $new_version" || echo "No changes to commit"

    - name: Merge changes to main
      if: github.event.action == 'labeled' || github.event.action == 'synchronize'
      run: |
        echo "Merging changes to main"
        
        # Fetch the latest changes
        git fetch origin
        
        # Check out the PR branch
        git checkout ${{ github.head_ref }}
        
        # Merge the PR branch into main
        git checkout main
        git merge ${{ github.head_ref }} --no-ff -m "Merge PR #${{ github.event.pull_request.number }} into main"
        
        # Push the updated main branch
        git push origin main
